/**
 * ===========================================
 * üîë `this` keyword, bind, call & apply
 * ===========================================
 *
 * This file explains:
 * - How `this` works in different contexts
 * - How `bind()`, `call()`, and `apply()` control `this`
 * - Practical examples with clear output
 *
 * üí° Read every comment ‚Äî you‚Äôll ace interviews!
 */

// -------------------------------
// 1Ô∏è‚É£ Global `this`
// -------------------------------

console.log("Global this:", this); // In Node.js, `this` in global scope is `{}` (empty object)

// -------------------------------
// 2Ô∏è‚É£ `this` inside a function
// -------------------------------

function showThis() {
    console.log("Inside function:", this);
}

showThis(); // In Node.js, `this` inside a simple function is the global object (or `undefined` in strict mode)

// -------------------------------
// 3Ô∏è‚É£ `this` inside an object method
// -------------------------------

const user = {
    name: "Andy",
    sayHello: function () {
        console.log("Hello,", this.name);
    },
};

user.sayHello(); // üëâ `this` refers to `user` object ‚ûú "Hello, Andy"

// -------------------------------
// 4Ô∏è‚É£ `this` in arrow functions
// -------------------------------

const arrowObj = {
    name: "Andy",
    normalFunc: function () {
        console.log("Normal Func:", this.name);
    },
    arrowFunc: () => {
        console.log("Arrow Func:", this.name);
    },
};

arrowObj.normalFunc(); // `this` ‚Üí arrowObj
arrowObj.arrowFunc(); // `this` ‚Üí outer scope, here it's the module/global (undefined in strict)

// -------------------------------
// 5Ô∏è‚É£ Losing `this` ‚Äî Common pitfall!
// -------------------------------

const greet = user.sayHello;
greet(); // `this` is lost ‚ûú `undefined` because it's a plain function now

// -------------------------------
// 6Ô∏è‚É£ Fixing `this` with `bind`
// -------------------------------

const boundGreet = user.sayHello.bind(user);
boundGreet(); // `this` stays locked to `user` ‚ûú "Hello, Andy"

// -------------------------------
// 7Ô∏è‚É£ Using `call` and `apply`
// -------------------------------

function introduce(lang1, lang2) {
    console.log(`${this.name} knows ${lang1} & ${lang2}`);
}

const dev = { name: "Andy Dev" };

introduce.call(dev, "JS", "TS");   // call() ‚ûú Pass args one by one
introduce.apply(dev, ["JS", "TS"]); // apply() ‚ûú Pass args as array

// -------------------------------
// 8Ô∏è‚É£ Class `this` in ES6
// -------------------------------

class Person {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`My name is ${this.name}`);
    }
}

const andy = new Person("Andy");
andy.speak(); // `this` refers to the instance

// -------------------------------
// ‚úÖ Quick summary
// -------------------------------
/**
 * ‚úîÔ∏è `this` depends on *how* a function is called.
 * ‚úîÔ∏è Arrow functions don't have their own `this`; they inherit it.
 * ‚úîÔ∏è `bind` creates a new function with `this` fixed.
 * ‚úîÔ∏è `call` and `apply` call a function immediately with explicit `this`.
 *
 * üí° Most interviewers test this!
 */

